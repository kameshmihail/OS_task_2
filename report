Московский Авиационный Институт
(Национальный Исследовательский Университет)

Факультет информационных технологий и прикладной математики
Кафедра вычислительной математики и программирования


Лабораторная работ №2 по курсу
«Операционные системы»
	

Оценка: ____________________ 
Дата:_____________________


Москва, 2019.
Содержание
1.	Постановка задачи
2.	Общие сведения о программе
3.	Общий метод и алгоритм решения
4.	Основные файлы программы
5.	Демонстрация работы программы
6.	Вывод


Постановка задачи.
Написать целочисленный калькулятор с операциями +, -. В дочернем процессе должны происходить вычисления выражений. В родительском процессе должны происходить ввод и вывод.

Общие сведения о программе
Программа компилируется из одного файла main.c. В данном файле используются заголовочные файлы stdio.h, unistd.h, string.h, stdlib.h. В программе используются следующие системные вызовы:
1.	read – для чтения данных из файла
2.	write – для записи данных в файл
3.	pipe – для создания однонаправленного канала, через который могут общаться два процесса. Системный вызов возвращает два дескриптора файлов. Один для чтения из канала, другой для записи в канал.
4.	fork– для создания дочернего процесса.
5.	close – для закрытия файла.


Общий метод и алгоритм решения.
Для реализации поставленной задачи необходимо:
1.	Используя системный вызов pipe создать 2 канала, по которым будут обмениваться данными два процесса.
2.	Используя системный вызов fork создать дочерний процесс.
3.	В родительском процессе считывать данные cо стандартного потока
4.	Передать данный в дочерний процесс командой write
5.	Считать данные командой read, произвести необходимые вычисления, передать данные обратно
6.	Считать обработанные данные и вывести на экран

Демонстрация работы программы.

1 4
Point lies in quarter 1
1 -4
Point lies in quarter 4
-1 4
Point lies in quarter 2
-1 -4 
Point lies in quarter 3




















Вывод
Межпроцессорное взаимодействие можно осуществлять с помощью канала. В СИ канал создается с помощью системного вызова pipe. На мой взгляд, такой способ общения процессов очень удобен, так как при данном подходе не приходится сталкиваться с гонками, так как при использовании блокирующих системных вызовов read и write процессы блокируются, если им нечего считывать или буфер для записи полный. Так же одним из плюсов такого подхода к межпроцессорному взаимодействию является то, что каналом могут пользоваться только родственные процессы, так как канал находится в пределах ядра.
